// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String    @default("What happened to your name?")
  lastName    String    @default("")
  password    String
  email       String    @unique
  avatar      String    @default("https://www.cs.toronto.edu/~kianoosh/courses/csc309/resources/handouts/pp1/logo.jpg")
  createTime  DateTime  @default(now())
  lastLogin   DateTime  @default(now())
  role        String    @default("USER")
  phoneNumber String?   @default("")// optinonal field
  isPro       Boolean  @default(false) // Tracks Pro status
  proExpiresAt DateTime? // Optional: Expiry for Pro status if it is subscription-based

  templates   Template[]
  BlogPost    BlogPost[]
  BlogComment BlogComment[]
  votes       Vote[] 
  reports     Report[] // the reports submitted by this user
}

model Template {
  id            Int       @id @default(autoincrement())
  title         String
  explaination  String    @default("")
  fileContent   String    @default("")
  createTime    DateTime  @default(now())
  lastEditTime  DateTime  @default(now())
  isForked      Boolean   @default(false)
  forkedFromId  Int?

  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  blogpost      BlogPost[]

  tags          Tag[]     @relation("TemplateTags")
  TemplateTag TemplateTag[]
}

model BlogPost {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  content     String
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  comments    BlogComment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reports     Report[]      
  hidden      Boolean       @default(false)
  rating      Int           @default(0)
  votes       Vote[]
  templates   Template[]

  tags        Tag[]         @relation("BlogPostTags")
  BlogPostTag BlogPostTag[]
}

model BlogComment {
  id              Int           @id @default(autoincrement())
  content         String
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  post            BlogPost      @relation(fields: [postId], references: [id])
  postId          Int
  // parentComment   BlogComment?  @relation("ParentComments", fields: [parentCommentId], references: [id])
  // parentCommentId Int?
  // replies         BlogComment[] @relation("ParentComments")
  createdAt       DateTime      @default(now())
  reports         Report[]      
  hidden          Boolean       @default(false)
  rating          Int           @default(0)
  votes           Vote[]
}

model Tag {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  blogPosts       BlogPost[]    @relation("BlogPostTags")
  BlogPostTag     BlogPostTag[]
  postId          Int?
  // template     Template?     @relation(fields: [templateId], references: [id])
  // templateId   Int?
  templates       Template[]    @relation("TemplateTags")
  TemplateTag     TemplateTag[]
}

model TemplateTag {
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  @@id([templateId, tagId])
}

model BlogPostTag {
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  @@id([blogPostId, tagId])
}

model Report {
  id           Int          @id @default(autoincrement())
  reason       String
  postId       Int?        
  commentId    Int?        
  userId       Int          // Reporter uid
  createdAt    DateTime     @default(now())
  
  post         BlogPost?    @relation(fields: [postId], references: [id]) // Relation to BlogPost if it's a post report
  comment      BlogComment? @relation(fields: [commentId], references: [id]) // Relation to BlogComment if it's a comment report
  user         User         @relation(fields: [userId], references: [id]) // Reporter uid
}

model Vote {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  blogPost  BlogPost?     @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
  comment   BlogComment?  @relation(fields: [commentId], references: [id])
  commentId Int?
  type      String        // upvote or downvote
  createdAt DateTime      @default(now())

  @@unique([userId, blogPostId]) // Ensure unique votes per user-post
  @@unique([userId, commentId])  // Ensure unique votes per user-comment
}
